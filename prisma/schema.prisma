// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  address   Json?
  emailVerified         Boolean   @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  resetToken            String?
  resetTokenExpires     DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  category    String
  imageUrl    String?  @map("image_url")
  stockQuantity Int    @default(0) @map("stock_quantity")
  season      String?
  features    Json?
  isFeatured  Boolean  @default(false) @map("is_featured")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  shippingAddress Json?       @map("shipping_address")
  paymentMethod   String?     @map("payment_method")
  paymentPlan     String?     @map("payment_plan")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     String  @map("order_id")
  productId   Int     @map("product_id")
  quantity    Int
  priceAtTime Decimal @db.Decimal(10, 2) @map("price_at_time")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  replied   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contact_messages")
}

model SupportMessage {
  id        Int           @id @default(autoincrement())
  userId    String        @map("user_id")
  sender    MessageSender
  message   String
  threadId  Int?          @map("thread_id")
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("support_messages")
}

model PaymentSetting {
  id          Int      @id @default(autoincrement())
  type        String
  displayName String   @map("display_name")
  description String?
  enabled     Boolean  @default(true)
  config      Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("payment_settings")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum MessageSender {
  USER
  ADMIN
}
